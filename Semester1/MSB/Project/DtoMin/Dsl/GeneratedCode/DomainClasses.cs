//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Andrei15193.DtoMin
{
	/// <summary>
	/// DomainClass DTOMap
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Andrei15193.DtoMin.DTOMap.DisplayName", typeof(global::Andrei15193.DtoMin.DtoMinDomainModel), "Andrei15193.DtoMin.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Andrei15193.DtoMin.DTOMap.Description", typeof(global::Andrei15193.DtoMin.DtoMinDomainModel), "Andrei15193.DtoMin.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Andrei15193.DtoMin.DtoMinDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("41d84654-c7fe-406c-b48a-b9d8821ad7d0")]
	public partial class DTOMap : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DTOMap domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x41d84654, 0xc7fe, 0x406c, 0xb4, 0x8a, 0xb9, 0xd8, 0x82, 0x1a, 0xd7, 0xd0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DTOMap(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DTOMap(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0x7d90e7c3, 0x320f, 0x4b91, 0x93, 0x1c, 0xde, 0xa4, 0x33, 0xc8, 0x07, 0xa8);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// Description for Andrei15193.DtoMin.DTOMap.Namespace
		/// </summary>
		[DslDesign::DisplayNameResource("Andrei15193.DtoMin.DTOMap/Namespace.DisplayName", typeof(global::Andrei15193.DtoMin.DtoMinDomainModel), "Andrei15193.DtoMin.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Andrei15193.DtoMin.DTOMap/Namespace.Description", typeof(global::Andrei15193.DtoMin.DtoMinDomainModel), "Andrei15193.DtoMin.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7d90e7c3-320f-4b91-931c-dea433c807a8")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DTOMap.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<DTOMap, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DTOMap.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DTOMap.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DTOMap element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DTOMap element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DTOs opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DTOs.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DTO> DTOs
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DTO>, DTO>(global::Andrei15193.DtoMin.DTOMapHasDTOs.DTOsDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Andrei15193.DtoMin.DTO.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Andrei15193.DtoMin.DTO sourceDTO1 = sourceElement as global::Andrei15193.DtoMin.DTO;
			if (sourceDTO1 != null)
			{
				// Create link for path DTOMapHasDTOs.DTOs
				this.DTOs.Add(sourceDTO1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Andrei15193.DtoMin.DTO sourceDTO1 = sourceElement as global::Andrei15193.DtoMin.DTO;
			if (sourceDTO1 != null)
			{
				// Delete link for path DTOMapHasDTOs.DTOs
				
				foreach (DslModeling::ElementLink link in global::Andrei15193.DtoMin.DTOMapHasDTOs.GetLinks((global::Andrei15193.DtoMin.DTOMap)this, sourceDTO1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Andrei15193.DtoMin.DTOMapHasDTOs.DTOsDomainRoleId, global::Andrei15193.DtoMin.DTOMapHasDTOs.DTOMapDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Andrei15193.DtoMin
{
	/// <summary>
	/// DomainClass DTO
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Andrei15193.DtoMin.DTO.DisplayName", typeof(global::Andrei15193.DtoMin.DtoMinDomainModel), "Andrei15193.DtoMin.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Andrei15193.DtoMin.DTO.Description", typeof(global::Andrei15193.DtoMin.DtoMinDomainModel), "Andrei15193.DtoMin.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Andrei15193.DtoMin.DtoMinDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("b08b385b-b640-4b91-9666-835dbf38ec8b")]
	public partial class DTO : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DTO domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb08b385b, 0xb640, 0x4b91, 0x96, 0x66, 0x83, 0x5d, 0xbf, 0x38, 0xec, 0x8b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DTO(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DTO(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x5d2e687d, 0xb26f, 0x4fc8, 0xbd, 0x4b, 0x01, 0xed, 0x24, 0x89, 0x3c, 0xb4);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Andrei15193.DtoMin.DTO.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Andrei15193.DtoMin.DTO/Name.DisplayName", typeof(global::Andrei15193.DtoMin.DtoMinDomainModel), "Andrei15193.DtoMin.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Andrei15193.DtoMin.DTO/Name.Description", typeof(global::Andrei15193.DtoMin.DtoMinDomainModel), "Andrei15193.DtoMin.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("5d2e687d-b26f-4fc8-bd4b-01ed24893cb4")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DTO.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DTO, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DTO.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DTO.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DTO element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DTO element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DTOMap opposite domain role accessor
		/// <summary>
		/// Gets or sets DTOMap.
		/// </summary>
		public virtual DTOMap DTOMap
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Andrei15193.DtoMin.DTOMapHasDTOs.DTOMapDomainRoleId) as DTOMap;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Andrei15193.DtoMin.DTOMapHasDTOs.DTOMapDomainRoleId, value);
			}
		}
		#endregion
		#region Attributes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Attributes.
		/// Description for Andrei15193.DtoMin.DTOHasAttributes.Attributes
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DTOAttribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DTOAttribute>, DTOAttribute>(global::Andrei15193.DtoMin.DTOHasAttributes.AttributesDomainRoleId);
			}
		}
		#endregion
		#region Childs opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Childs.
		/// Description for Andrei15193.DtoMin.DTOReferencesDTOs.Childs
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<DTO> Childs
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DTO>, DTO>(global::Andrei15193.DtoMin.DTOReferencesDTOs.ChildsDomainRoleId);
			}
		}
		#endregion
		#region Parent opposite domain role accessor
		/// <summary>
		/// Gets or sets Parent.
		/// Description for Andrei15193.DtoMin.DTOReferencesDTOs.Parent
		/// </summary>
		public virtual DTO Parent
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Andrei15193.DtoMin.DTOReferencesDTOs.ParentDomainRoleId) as DTO;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Andrei15193.DtoMin.DTOReferencesDTOs.ParentDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Andrei15193.DtoMin.DTOAttribute.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Andrei15193.DtoMin.DTOAttribute sourceDTOAttribute1 = sourceElement as global::Andrei15193.DtoMin.DTOAttribute;
			if (sourceDTOAttribute1 != null)
			{
				// Create link for path DTOHasAttributes.Attributes
				this.Attributes.Add(sourceDTOAttribute1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Andrei15193.DtoMin.DTOAttribute sourceDTOAttribute1 = sourceElement as global::Andrei15193.DtoMin.DTOAttribute;
			if (sourceDTOAttribute1 != null)
			{
				// Delete link for path DTOHasAttributes.Attributes
				
				foreach (DslModeling::ElementLink link in global::Andrei15193.DtoMin.DTOHasAttributes.GetLinks((global::Andrei15193.DtoMin.DTO)this, sourceDTOAttribute1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Andrei15193.DtoMin.DTOHasAttributes.AttributesDomainRoleId, global::Andrei15193.DtoMin.DTOHasAttributes.ContainerDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Andrei15193.DtoMin
{
	/// <summary>
	/// DomainClass DTOAttribute
	/// Description for Andrei15193.DtoMin.DTOAttribute
	/// </summary>
	[DslDesign::DisplayNameResource("Andrei15193.DtoMin.DTOAttribute.DisplayName", typeof(global::Andrei15193.DtoMin.DtoMinDomainModel), "Andrei15193.DtoMin.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Andrei15193.DtoMin.DTOAttribute.Description", typeof(global::Andrei15193.DtoMin.DtoMinDomainModel), "Andrei15193.DtoMin.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Andrei15193.DtoMin.DtoMinDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8ae96828-4697-43d3-bba7-81a3acb702f9")]
	public partial class DTOAttribute : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DTOAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8ae96828, 0x4697, 0x43d3, 0xbb, 0xa7, 0x81, 0xa3, 0xac, 0xb7, 0x02, 0xf9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DTOAttribute(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DTOAttribute(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xa52364c1, 0xaf0e, 0x4109, 0x92, 0x00, 0x44, 0x53, 0x3d, 0x8d, 0xef, 0xc9);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "Attribute";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Andrei15193.DtoMin.DTOAttribute.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Andrei15193.DtoMin.DTOAttribute/Name.DisplayName", typeof(global::Andrei15193.DtoMin.DtoMinDomainModel), "Andrei15193.DtoMin.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Andrei15193.DtoMin.DTOAttribute/Name.Description", typeof(global::Andrei15193.DtoMin.DtoMinDomainModel), "Andrei15193.DtoMin.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Attribute")]
		[DslModeling::DomainObjectId("a52364c1-af0e-4109-9200-44533d8defc9")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DTOAttribute.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DTOAttribute, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DTOAttribute.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DTOAttribute.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DTOAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DTOAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x3b6916d5, 0x02d1, 0x467f, 0xa6, 0xef, 0x53, 0xa9, 0xc7, 0xab, 0x26, 0x7a);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private AttributeType typePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for Andrei15193.DtoMin.DTOAttribute.Type
		/// </summary>
		[DslDesign::DisplayNameResource("Andrei15193.DtoMin.DTOAttribute/Type.DisplayName", typeof(global::Andrei15193.DtoMin.DtoMinDomainModel), "Andrei15193.DtoMin.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Andrei15193.DtoMin.DTOAttribute/Type.Description", typeof(global::Andrei15193.DtoMin.DtoMinDomainModel), "Andrei15193.DtoMin.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3b6916d5-02d1-467f-a6ef-53a9c7ab267a")]
		public AttributeType Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DTOAttribute.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<DTOAttribute, AttributeType>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DTOAttribute.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DTOAttribute.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed AttributeType GetValue(DTOAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DTOAttribute element, AttributeType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				AttributeType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Multiplicity domain property code
		
		/// <summary>
		/// Multiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid MultiplicityDomainPropertyId = new global::System.Guid(0xcf9375de, 0xd2da, 0x4aee, 0xa3, 0x77, 0x40, 0x03, 0x1a, 0x9d, 0xe0, 0xb0);
		
		/// <summary>
		/// Storage for Multiplicity
		/// </summary>
		private Multiplicity multiplicityPropertyStorage = Multiplicity.Single;
		
		/// <summary>
		/// Gets or sets the value of Multiplicity domain property.
		/// Description for Andrei15193.DtoMin.DTOAttribute.Multiplicity
		/// </summary>
		[DslDesign::DisplayNameResource("Andrei15193.DtoMin.DTOAttribute/Multiplicity.DisplayName", typeof(global::Andrei15193.DtoMin.DtoMinDomainModel), "Andrei15193.DtoMin.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Andrei15193.DtoMin.DTOAttribute/Multiplicity.Description", typeof(global::Andrei15193.DtoMin.DtoMinDomainModel), "Andrei15193.DtoMin.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Multiplicity.Single)]
		[DslModeling::DomainObjectId("cf9375de-d2da-4aee-a377-40031a9de0b0")]
		public Multiplicity Multiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return multiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DTOAttribute.Multiplicity domain property.
		/// </summary>
		internal sealed partial class MultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<DTOAttribute, Multiplicity>
		{
			private MultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DTOAttribute.Multiplicity domain property value handler.
			/// </summary>
			public static readonly MultiplicityPropertyHandler Instance = new MultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DTOAttribute.Multiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(DTOAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.multiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DTOAttribute element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.multiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Container opposite domain role accessor
		/// <summary>
		/// Gets or sets Container.
		/// Description for Andrei15193.DtoMin.DTOHasAttributes.Container
		/// </summary>
		public virtual DTO Container
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Andrei15193.DtoMin.DTOHasAttributes.ContainerDomainRoleId) as DTO;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Andrei15193.DtoMin.DTOHasAttributes.ContainerDomainRoleId, value);
			}
		}
		#endregion
	}
}
